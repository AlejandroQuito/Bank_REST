services:

  redis:
    image: redis:latest
    env_file: .env
    command: [ "redis-server", "--requirepass", "${REDIS_PASSWORD}" ]
    environment:
        - REDIS_PASSWORD=${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: always
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "$${REDIS_PASSWORD}", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - backend

  postgres:
    image: postgres:13.3
    env_file: .env
    environment:
      POSTGRES_DB: ${SPRING_DATABASE_NAME}
      POSTGRES_USER: ${SPRING_DATASOURCE_USERNAME}
      POSTGRES_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      start_period: 10s
      retries: 5
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend

  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    env_file: .env
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=${SPRING_DATASOURCE_URL}
      - SPRING_DATASOURCE_USERNAME=${SPRING_DATASOURCE_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${SPRING_DATASOURCE_PASSWORD}
      - SPRING_DATA_REDIS_HOST=${REDIS_HOST}
      - SPRING_DATA_REDIS_PORT=${REDIS_PORT}
      - SPRING_DATA_REDIS_PASSWORD=${REDIS_PASSWORD}
      - SPRING_CACHE_TYPE=${SPRING_CACHE_TYPE}
      - JWT_ACCESS_SECRET=${JWT_ACCESS_SECRET}
      - SERVER_CONTEXT_PATH=${SERVER_CONTEXT_PATH}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: [
        "CMD", "curl", "-f", "http://localhost:8082$${SERVER_CONTEXT_PATH}/actuator/health",
        "||", "exit", "1"
      ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    restart: unless-stopped
    networks:
      - backend

volumes:
  postgres_data:
  redis_data:

networks:
  backend: